// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// binFit64ToDepth
NumericMatrix binFit64ToDepth(NumericMatrix dmat, std::string bitdepth);
RcppExport SEXP feature2_binFit64ToDepth(SEXP dmatSEXP, SEXP bitdepthSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< std::string >::type bitdepth(bitdepthSEXP);
    __result = Rcpp::wrap(binFit64ToDepth(dmat, bitdepth));
    return __result;
END_RCPP
}
// Blur2D
NumericMatrix Blur2D(NumericMatrix dmat, std::string bitdepth, int num_rows_kernel, int num_cols_kernel, int center_row, int center_col, std::string borderType);
RcppExport SEXP feature2_Blur2D(SEXP dmatSEXP, SEXP bitdepthSEXP, SEXP num_rows_kernelSEXP, SEXP num_cols_kernelSEXP, SEXP center_rowSEXP, SEXP center_colSEXP, SEXP borderTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< std::string >::type bitdepth(bitdepthSEXP);
    Rcpp::traits::input_parameter< int >::type num_rows_kernel(num_rows_kernelSEXP);
    Rcpp::traits::input_parameter< int >::type num_cols_kernel(num_cols_kernelSEXP);
    Rcpp::traits::input_parameter< int >::type center_row(center_rowSEXP);
    Rcpp::traits::input_parameter< int >::type center_col(center_colSEXP);
    Rcpp::traits::input_parameter< std::string >::type borderType(borderTypeSEXP);
    __result = Rcpp::wrap(Blur2D(dmat, bitdepth, num_rows_kernel, num_cols_kernel, center_row, center_col, borderType));
    return __result;
END_RCPP
}
// borderTypeCode
int borderTypeCode(std::string borderType);
RcppExport SEXP feature2_borderTypeCode(SEXP borderTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type borderType(borderTypeSEXP);
    __result = Rcpp::wrap(borderTypeCode(borderType));
    return __result;
END_RCPP
}
// CCF_2D
NumericMatrix CCF_2D(NumericMatrix dmat, NumericMatrix tmplte, int x_maxlag, int y_maxlag, std::string bitdepth);
RcppExport SEXP feature2_CCF_2D(SEXP dmatSEXP, SEXP tmplteSEXP, SEXP x_maxlagSEXP, SEXP y_maxlagSEXP, SEXP bitdepthSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tmplte(tmplteSEXP);
    Rcpp::traits::input_parameter< int >::type x_maxlag(x_maxlagSEXP);
    Rcpp::traits::input_parameter< int >::type y_maxlag(y_maxlagSEXP);
    Rcpp::traits::input_parameter< std::string >::type bitdepth(bitdepthSEXP);
    __result = Rcpp::wrap(CCF_2D(dmat, tmplte, x_maxlag, y_maxlag, bitdepth));
    return __result;
END_RCPP
}
// testscale
void testscale(NumericMatrix dmat, std::string bitdepth, bool printQ);
RcppExport SEXP feature2_testscale(SEXP dmatSEXP, SEXP bitdepthSEXP, SEXP printQSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< std::string >::type bitdepth(bitdepthSEXP);
    Rcpp::traits::input_parameter< bool >::type printQ(printQSEXP);
    testscale(dmat, bitdepth, printQ);
    return R_NilValue;
END_RCPP
}
// testConvert
NumericMatrix testConvert(NumericMatrix dmat, bool printQ);
RcppExport SEXP feature2_testConvert(SEXP dmatSEXP, SEXP printQSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< bool >::type printQ(printQSEXP);
    __result = Rcpp::wrap(testConvert(dmat, printQ));
    return __result;
END_RCPP
}
// Circular_Mask_ROI
NumericMatrix Circular_Mask_ROI(NumericMatrix dmat, int xc_idx, int yc_idx, int pix_radius);
RcppExport SEXP feature2_Circular_Mask_ROI(SEXP dmatSEXP, SEXP xc_idxSEXP, SEXP yc_idxSEXP, SEXP pix_radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< int >::type xc_idx(xc_idxSEXP);
    Rcpp::traits::input_parameter< int >::type yc_idx(yc_idxSEXP);
    Rcpp::traits::input_parameter< int >::type pix_radius(pix_radiusSEXP);
    __result = Rcpp::wrap(Circular_Mask_ROI(dmat, xc_idx, yc_idx, pix_radius));
    return __result;
END_RCPP
}
// Crop_Retangular_ROI
NumericMatrix Crop_Retangular_ROI(NumericMatrix dmat, unsigned int Xstart_index, unsigned int Ystart_index, unsigned int Width, unsigned int Height);
RcppExport SEXP feature2_Crop_Retangular_ROI(SEXP dmatSEXP, SEXP Xstart_indexSEXP, SEXP Ystart_indexSEXP, SEXP WidthSEXP, SEXP HeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type Xstart_index(Xstart_indexSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type Ystart_index(Ystart_indexSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type Width(WidthSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type Height(HeightSEXP);
    __result = Rcpp::wrap(Crop_Retangular_ROI(dmat, Xstart_index, Ystart_index, Width, Height));
    return __result;
END_RCPP
}
// DFTMag2D
NumericMatrix DFTMag2D(NumericMatrix dmat, std::string bitdepth);
RcppExport SEXP feature2_DFTMag2D(SEXP dmatSEXP, SEXP bitdepthSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< std::string >::type bitdepth(bitdepthSEXP);
    __result = Rcpp::wrap(DFTMag2D(dmat, bitdepth));
    return __result;
END_RCPP
}
// Display2D_openCV
void Display2D_openCV(NumericMatrix dmat, int rowWidth, int colWidth, std::string bitdepth, std::string file_ext, bool printQ, std::string exe_path);
RcppExport SEXP feature2_Display2D_openCV(SEXP dmatSEXP, SEXP rowWidthSEXP, SEXP colWidthSEXP, SEXP bitdepthSEXP, SEXP file_extSEXP, SEXP printQSEXP, SEXP exe_pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< int >::type rowWidth(rowWidthSEXP);
    Rcpp::traits::input_parameter< int >::type colWidth(colWidthSEXP);
    Rcpp::traits::input_parameter< std::string >::type bitdepth(bitdepthSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_ext(file_extSEXP);
    Rcpp::traits::input_parameter< bool >::type printQ(printQSEXP);
    Rcpp::traits::input_parameter< std::string >::type exe_path(exe_pathSEXP);
    Display2D_openCV(dmat, rowWidth, colWidth, bitdepth, file_ext, printQ, exe_path);
    return R_NilValue;
END_RCPP
}
// Fill_Holes
NumericMatrix Fill_Holes(NumericMatrix dmat, NumericMatrix mask);
RcppExport SEXP feature2_Fill_Holes(SEXP dmatSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mask(maskSEXP);
    __result = Rcpp::wrap(Fill_Holes(dmat, mask));
    return __result;
END_RCPP
}
// Filter2D
NumericMatrix Filter2D(NumericMatrix dmat, NumericMatrix kernel, std::string bitdepth);
RcppExport SEXP feature2_Filter2D(SEXP dmatSEXP, SEXP kernelSEXP, SEXP bitdepthSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< std::string >::type bitdepth(bitdepthSEXP);
    __result = Rcpp::wrap(Filter2D(dmat, kernel, bitdepth));
    return __result;
END_RCPP
}
// FindHoles
NumericMatrix FindHoles(NumericMatrix dmat_mask, std::string mode, std::string approx_method, double big_hole_tol);
RcppExport SEXP feature2_FindHoles(SEXP dmat_maskSEXP, SEXP modeSEXP, SEXP approx_methodSEXP, SEXP big_hole_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat_mask(dmat_maskSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< std::string >::type approx_method(approx_methodSEXP);
    Rcpp::traits::input_parameter< double >::type big_hole_tol(big_hole_tolSEXP);
    __result = Rcpp::wrap(FindHoles(dmat_mask, mode, approx_method, big_hole_tol));
    return __result;
END_RCPP
}
// GaussianBlur2D
NumericMatrix GaussianBlur2D(NumericMatrix dmat, std::string bitdepth, int num_rows_kernel, int num_cols_kernel, double sigmaX, double sigmaY, std::string borderType);
RcppExport SEXP feature2_GaussianBlur2D(SEXP dmatSEXP, SEXP bitdepthSEXP, SEXP num_rows_kernelSEXP, SEXP num_cols_kernelSEXP, SEXP sigmaXSEXP, SEXP sigmaYSEXP, SEXP borderTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< std::string >::type bitdepth(bitdepthSEXP);
    Rcpp::traits::input_parameter< int >::type num_rows_kernel(num_rows_kernelSEXP);
    Rcpp::traits::input_parameter< int >::type num_cols_kernel(num_cols_kernelSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaX(sigmaXSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaY(sigmaYSEXP);
    Rcpp::traits::input_parameter< std::string >::type borderType(borderTypeSEXP);
    __result = Rcpp::wrap(GaussianBlur2D(dmat, bitdepth, num_rows_kernel, num_cols_kernel, sigmaX, sigmaY, borderType));
    return __result;
END_RCPP
}
// lewis3
NumericMatrix lewis3(IntegerVector u_idxs, IntegerVector v_idxs, IntegerVector nz_idxs, NumericVector ff, int offset1, int offset2, int offset3);
RcppExport SEXP feature2_lewis3(SEXP u_idxsSEXP, SEXP v_idxsSEXP, SEXP nz_idxsSEXP, SEXP ffSEXP, SEXP offset1SEXP, SEXP offset2SEXP, SEXP offset3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type u_idxs(u_idxsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type v_idxs(v_idxsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nz_idxs(nz_idxsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ff(ffSEXP);
    Rcpp::traits::input_parameter< int >::type offset1(offset1SEXP);
    Rcpp::traits::input_parameter< int >::type offset2(offset2SEXP);
    Rcpp::traits::input_parameter< int >::type offset3(offset3SEXP);
    __result = Rcpp::wrap(lewis3(u_idxs, v_idxs, nz_idxs, ff, offset1, offset2, offset3));
    return __result;
END_RCPP
}
// lewis4
NumericMatrix lewis4(int num_svals, IntegerVector nz_idxs, NumericVector ff, int offset1, int offset2, int offset3);
RcppExport SEXP feature2_lewis4(SEXP num_svalsSEXP, SEXP nz_idxsSEXP, SEXP ffSEXP, SEXP offset1SEXP, SEXP offset2SEXP, SEXP offset3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type num_svals(num_svalsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nz_idxs(nz_idxsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ff(ffSEXP);
    Rcpp::traits::input_parameter< int >::type offset1(offset1SEXP);
    Rcpp::traits::input_parameter< int >::type offset2(offset2SEXP);
    Rcpp::traits::input_parameter< int >::type offset3(offset3SEXP);
    __result = Rcpp::wrap(lewis4(num_svals, nz_idxs, ff, offset1, offset2, offset3));
    return __result;
END_RCPP
}
// Pad_NumericMatrix
NumericMatrix Pad_NumericMatrix(NumericMatrix dmat, int top, int bottom, int left, int right, std::string border_type, double value);
RcppExport SEXP feature2_Pad_NumericMatrix(SEXP dmatSEXP, SEXP topSEXP, SEXP bottomSEXP, SEXP leftSEXP, SEXP rightSEXP, SEXP border_typeSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< int >::type top(topSEXP);
    Rcpp::traits::input_parameter< int >::type bottom(bottomSEXP);
    Rcpp::traits::input_parameter< int >::type left(leftSEXP);
    Rcpp::traits::input_parameter< int >::type right(rightSEXP);
    Rcpp::traits::input_parameter< std::string >::type border_type(border_typeSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    __result = Rcpp::wrap(Pad_NumericMatrix(dmat, top, bottom, left, right, border_type, value));
    return __result;
END_RCPP
}
// numvec_to_python
void numvec_to_python(std::string name, NumericVector x);
RcppExport SEXP feature2_numvec_to_python(SEXP nameSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    numvec_to_python(name, x);
    return R_NilValue;
END_RCPP
}
// pyrun
void pyrun(std::string command);
RcppExport SEXP feature2_pyrun(SEXP commandSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type command(commandSEXP);
    pyrun(command);
    return R_NilValue;
END_RCPP
}
// initialize_python
void initialize_python();
RcppExport SEXP feature2_initialize_python() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    initialize_python();
    return R_NilValue;
END_RCPP
}
// finalize_python
void finalize_python();
RcppExport SEXP feature2_finalize_python() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    finalize_python();
    return R_NilValue;
END_RCPP
}
// Resize
NumericMatrix Resize(NumericMatrix dmat, unsigned int num_rows, unsigned int num_cols);
RcppExport SEXP feature2_Resize(SEXP dmatSEXP, SEXP num_rowsSEXP, SEXP num_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_rows(num_rowsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_cols(num_colsSEXP);
    __result = Rcpp::wrap(Resize(dmat, num_rows, num_cols));
    return __result;
END_RCPP
}
// RollColumns
NumericMatrix RollColumns(NumericMatrix dmat, std::string direction, unsigned int n);
RcppExport SEXP feature2_RollColumns(SEXP dmatSEXP, SEXP directionSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< std::string >::type direction(directionSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    __result = Rcpp::wrap(RollColumns(dmat, direction, n));
    return __result;
END_RCPP
}
// RollRows
NumericMatrix RollRows(NumericMatrix dmat, std::string direction, unsigned int n);
RcppExport SEXP feature2_RollRows(SEXP dmatSEXP, SEXP directionSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< std::string >::type direction(directionSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    __result = Rcpp::wrap(RollRows(dmat, direction, n));
    return __result;
END_RCPP
}
// Sobel
NumericMatrix Sobel(NumericMatrix dmat, std::string bitdepth, int ddepth, int dx, int dy, int ksize, double scale, double delta, int borderType);
RcppExport SEXP feature2_Sobel(SEXP dmatSEXP, SEXP bitdepthSEXP, SEXP ddepthSEXP, SEXP dxSEXP, SEXP dySEXP, SEXP ksizeSEXP, SEXP scaleSEXP, SEXP deltaSEXP, SEXP borderTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< std::string >::type bitdepth(bitdepthSEXP);
    Rcpp::traits::input_parameter< int >::type ddepth(ddepthSEXP);
    Rcpp::traits::input_parameter< int >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< int >::type dy(dySEXP);
    Rcpp::traits::input_parameter< int >::type ksize(ksizeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type borderType(borderTypeSEXP);
    __result = Rcpp::wrap(Sobel(dmat, bitdepth, ddepth, dx, dy, ksize, scale, delta, borderType));
    return __result;
END_RCPP
}
// vec2mat
NumericMatrix vec2mat(NumericVector row_idxs, NumericVector col_idxs, NumericVector mat_elems, int num_rows, int num_cols);
RcppExport SEXP feature2_vec2mat(SEXP row_idxsSEXP, SEXP col_idxsSEXP, SEXP mat_elemsSEXP, SEXP num_rowsSEXP, SEXP num_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type row_idxs(row_idxsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type col_idxs(col_idxsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mat_elems(mat_elemsSEXP);
    Rcpp::traits::input_parameter< int >::type num_rows(num_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type num_cols(num_colsSEXP);
    __result = Rcpp::wrap(vec2mat(row_idxs, col_idxs, mat_elems, num_rows, num_cols));
    return __result;
END_RCPP
}
// vltest
void vltest();
RcppExport SEXP feature2_vltest() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    vltest();
    return R_NilValue;
END_RCPP
}
// WriteMat
void WriteMat(NumericMatrix dmat, std::string bitdepth, std::string fpath);
RcppExport SEXP feature2_WriteMat(SEXP dmatSEXP, SEXP bitdepthSEXP, SEXP fpathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< std::string >::type bitdepth(bitdepthSEXP);
    Rcpp::traits::input_parameter< std::string >::type fpath(fpathSEXP);
    WriteMat(dmat, bitdepth, fpath);
    return R_NilValue;
END_RCPP
}
